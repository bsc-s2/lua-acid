# vim:set ft=lua ts=4 sw=4 et ft=perl:

################################################################################
# DO NOT EDIT THIS FILE.                                                       #
# Use ./t/build_ngx_ut.sh to regenerate this wrapper file.                     #
################################################################################

use Test::Nginx::Socket "no_plan";

no_long_string();

# Env TEST_VERBOSE is set by command "prove"
#
# Only env var starting with TEST_NGINX_ will be evaluated in the "--- config"
# block.
$ENV{TEST_NGINX_ACID_UT_VERBOSE} = $ENV{TEST_VERBOSE} || 0;

run_tests();

__DATA__

=== TEST 1: apiutil
--- http_config
    lua_shared_dict        shared_dict_lock 1m;
    lua_shared_dict        test_shared      10m;
    lua_check_client_abort on;

    lua_package_path "./lib/?.lua;;";
    lua_package_cpath "./lib/?.so;;";
--- config
    location /t {
        content_by_lua_block {
             local apiutil = require("acid.apiutil")
             local strutil = require("acid.strutil")
             local args = ngx.req.get_uri_args()
             code = args['code']
             body = args['body']
             headers_split = strutil.split(args['headers'],",")
             headers = {}
             for i, v in ipairs(headers_split) do
                key, value = unpack(strutil.split(v,"="))
                headers[key] = value
             end
             ngx.log(ngx.ERROR,apiutil.output(code,headers,body))
        }
    }
--- pipelined_requests eval
['GET /t?code=200&headers=Content-Type=application/json,Content-Encoding=gzip,a=b&body=123456',
'GET /t?code=500&headers=Content-Type=application/xml&body=12345aaa6',
'GET /t?code=404&headers=Content-Type=application/xml&body=123456']
--- response_body eval
['123456',
'12345aaa6',
'123456']
--- error_code eval
[200,
500,
404]
--- response_headers eval
['Content-Type: application/json
Content-Encoding: gzip
a=b',
'Content-Type: application/xml',
'Content-Type: application/xml']
